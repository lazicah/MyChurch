package com.disciplesbay.latterhousehq.mychurch;

import android.app.ProgressDialog;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Build;
import android.support.design.widget.Snackbar;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.RetryPolicy;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.HttpStack;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.braintreepayments.cardform.OnCardFormSubmitListener;
import com.braintreepayments.cardform.utils.CardType;
import com.braintreepayments.cardform.view.CardEditText;
import com.braintreepayments.cardform.view.CardForm;
import com.braintreepayments.cardform.view.SupportedCardTypesView;
import com.disciplesbay.latterhousehq.mychurch.Utils.TLSSocketFactory;
import com.disciplesbay.latterhousehq.mychurch.app.AppController;
import com.disciplesbay.latterhousehq.mychurch.app.ConnectivityReceiver;
import com.disciplesbay.latterhousehq.mychurch.helper.SQLiteHandler;
import com.disciplesbay.latterhousehq.mychurch.helper.SessionManager;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.rengwuxian.materialedittext.MaterialEditText;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import co.paystack.android.Paystack;
import co.paystack.android.PaystackSdk;
import co.paystack.android.Transaction;
import co.paystack.android.exceptions.ExpiredAccessCodeException;
import co.paystack.android.model.Card;
import co.paystack.android.model.Charge;
import co.paystack.android.model.PaystackModel;
import co.paystack.android.ui.OtpActivity;
import co.paystack.android.ui.OtpSingleton;

public class PaymentActivity extends AppCompatActivity implements ConnectivityReceiver.ConnectivityReceiverListener, OnCardFormSubmitListener,
        CardEditText.OnCardTypeChangedListener {


    // To get started quickly, change this to your heroku deployment of
    // https://github.com/PaystackHQ/sample-charge-card-backend
    // Step 1. Visit https://github.com/PaystackHQ/sample-charge-card-backend
    // Step 2. Click "Deploy to heroku"
    // Step 3. Login with your heroku credentials or create a free heroku account
    // Step 4. Provide your secret key and an email with which to start all test transactions
    // Step 5. Copy the url generated by heroku (format https://some-url.herokuapp.com) into the space below
    String backend_url = "new";
    // Set this to a public key that matches the secret key you supplied while creating the heroku instance
    String paystack_public_key = "pk_test_83c9a315b069c930189220a4adf6cf2a286a14a5";
    //pk_test_882c095e1651994e3fd22fb7236422d32b9b9121


    EditText mEditCardNum;
    EditText mEditCVC;
    EditText mEditExpiryMonth;
    EditText mEditExpiryYear;

    TextView mTextError;
    TextView mTextBackendMessage;

    ProgressDialog dialog;
    Snackbar snackbar;
    SessionManager session;
    Button mButtonPerformLocalTransaction;
    MaterialEditText amountEntered;
    MaterialEditText tagEntered;
    private TextView mTextReference;
    private Charge charge;
    private Transaction transaction;
    private JSONObject metadata;
    private JSONArray customfields;
    private SQLiteHandler db;
    private AdView mAdView;

    private static final CardType[] SUPPORTED_CARD_TYPES = { CardType.VISA, CardType.MASTERCARD, CardType.DISCOVER,
            CardType.AMEX, CardType.DINERS_CLUB, CardType.JCB, CardType.MAESTRO, CardType.UNIONPAY, CardType.UNKNOWN };

    private SupportedCardTypesView mSupportedCardTypesView;

    protected CardForm mCardForm;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_payment);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        ActionBar actionBar = getSupportActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
        db = new SQLiteHandler(this);

        if (BuildConfig.DEBUG && (backend_url.equals(""))) {
            throw new AssertionError("Please set a backend url before running the sample");
        }
        if (BuildConfig.DEBUG && (paystack_public_key.equals(""))) {
            throw new AssertionError("Please set a public key before running the sample");
        }

        PaystackSdk.setPublicKey(paystack_public_key);
        dialog = new ProgressDialog(PaymentActivity.this);

        amountEntered = (MaterialEditText) findViewById(R.id.amount);
        tagEntered = (MaterialEditText) findViewById(R.id.reference);

        Button mButtonPerformTransaction = findViewById(R.id.button_perform_transaction);
        final Button mButtonPerformLocalTransaction = findViewById(R.id.pay);

       // mTextError = findViewById(R.id.textview_error);
        //mTextBackendMessage = findViewById(R.id.textview_backend_message);
        //mTextReference = findViewById(R.id.textview_reference);

        //initialize sdk
        PaystackSdk.initialize(getApplicationContext());

        session = new SessionManager(this);

        mSupportedCardTypesView = findViewById(R.id.supported_card_types);
        mSupportedCardTypesView.setSupportedCardTypes(SUPPORTED_CARD_TYPES);

        mCardForm = findViewById(R.id.card_form);
        mCardForm.cardRequired(true)
                .maskCardNumber(true)
                .maskCvv(true)
                .expirationRequired(true)
                .cvvRequired(true)
                .actionLabel("Enter your transaction Details")
                .setup(this);
        mCardForm.setOnCardFormSubmitListener(this);
        mCardForm.setOnCardTypeChangedListener(this);

        // Warning: this is for development purposes only and should never be done outside of this example app.
        // Failure to set FLAG_SECURE exposes your app to screenshots allowing other apps to steal card information.
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);


        /**
         *

        Button saveCard = (Button) findViewById(R.id.saveCard);
        saveCard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (!mEditCardNum.getText().toString().isEmpty() && !mEditCVC.getText().toString().isEmpty()
                        && !mEditExpiryYear.getText().toString().isEmpty()
                        && !mEditExpiryMonth.getText().toString().isEmpty()) {
                    long cN = Long.parseLong(mEditCardNum.getText().toString());
                    int cvv = Integer.parseInt(mEditCVC.getText().toString());
                    int yr = Integer.parseInt(mEditExpiryYear.getText().toString());
                    int mh = Integer.parseInt(mEditExpiryMonth.getText().toString());
                    db.addCard(1, cN, cvv, yr, mh);
                    try {
                        if (!db.getCard().isEmpty()) {
                            Toast.makeText(PaymentActivity.this, "Card saved Successfully", Toast.LENGTH_SHORT).show();

                        }
                    } catch (Exception e) {
                    }

                } else
                    Toast.makeText(PaymentActivity.this, " Input Card details", Toast.LENGTH_LONG).show();

            }
        });

        Button loadCard = (Button) findViewById(R.id.loadCard);
        loadCard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (!db.getCard().isEmpty()) {
                    mEditCardNum.setText(db.getCard().get("cardNumber"));
                    mEditCVC.setText(db.getCard().get("cvv"));
                    mEditExpiryYear.setText(db.getCard().get("year"));
                    mEditExpiryMonth.setText(db.getCard().get("month"));
                } else
                    Toast.makeText(PaymentActivity.this, "Card database is empty, Please save card first", Toast.LENGTH_LONG).show();

            }
        });

        Button deleteCard = (Button) findViewById(R.id.deleteCard);
        deleteCard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                db.deleteCard();
                try {
                    if (db.getCard().isEmpty()) {
                        Toast.makeText(PaymentActivity.this, "Card deleted Successfully", Toast.LENGTH_SHORT).show();

                    }
                } catch (Exception e) {
                }
            }
        });

*/

        /**
         *

         //set click listener
         mButtonPerformTransaction.setOnClickListener(new View.OnClickListener() {
        @Override public void onClick(View view) {

        try {
        startAFreshCharge(false);
        } catch (Exception e) {
        PaymentActivity.this.mTextError.setText(String.format("An error occurred while charging card: %s %s", e.getClass().getSimpleName(), e.getMessage()));

        }
        }
        });
         */
        mButtonPerformLocalTransaction.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View view) {

                if (session.isLoggedIn()) {

                    if (mCardForm.isValid()) {

                        Toast.makeText(PaymentActivity.this, "Valid", Toast.LENGTH_SHORT).show();
                        try {
                            startAFreshCharge(true);
                        } catch (Exception e) {
                         //   PaymentActivity.this.mTextError.setText(String.format("An error occurred while charging card: %s %s", e.getClass().getSimpleName(), e.getMessage()));

                        }

                    }else {
                        mCardForm.validate();
                        Toast.makeText(PaymentActivity.this, "Invalid", Toast.LENGTH_SHORT).show();
                    }




                } else {
                    snackbar = Snackbar.make(findViewById(R.id.parentPay), "Please Login to Continue", Snackbar.LENGTH_LONG);

                    View sbView = snackbar.getView();
                    TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);
                    textView.setTextColor(Color.WHITE);
                    snackbar.setAction("LOGIN", new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            Intent intent = new Intent(PaymentActivity.this, LoginActivity.class);
                            startActivity(intent);
                        }
                    });
                    snackbar.setActionTextColor(Color.RED);
                    snackbar.show();


                }
            }
        });
    }

    private void startAFreshCharge(boolean local) throws JSONException {
        // initialize the charge
        charge = new Charge();
        charge.setCard(loadCardFromForm());


        dialog.setMessage("Performing transaction... please wait");
        dialog.show();
        dialog.setCancelable(false);

        amountEntered = (MaterialEditText) findViewById(R.id.amount);
        amountEntered.getText();
        tagEntered = (MaterialEditText) findViewById(R.id.reference);
        tagEntered.getText();

        SQLiteHandler db = new SQLiteHandler(this);

        int amount = Integer.parseInt(amountEntered.getText().toString()) * 100;
        String email = db.getUserDetails().get("email");

        this.metadata = new JSONObject();
        this.customfields = new JSONArray();
        JSONObject customObj = new JSONObject();

        try {
            customObj.put("churchId", "1");
            customObj.put("userId", db.getUserDetails().get("uid"));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        this.customfields.put(customObj);

        try {
            this.metadata.put("custom_fields", this.customfields);
        } catch (JSONException e) {
            Log.d("Payment activity", e.toString());
        }

        if (local) {
            // Set transaction params directly in app (note that these params
            // are only used if an access_code is not set. In debug mode,
            // setting them after setting an access code would throw an exception
            charge.putMetadata("metadata", this.metadata);
            charge.setAmount(amount);
            charge.setEmail(email);
            charge.setReference(tagEntered.getText().toString().replaceAll("\\s+","") + Calendar.getInstance().getTimeInMillis());
            try {
                charge.putCustomField("Charged From", "Android SDK");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            chargeCard();
        } else {
            // Perform transaction/initialize on our server to get an access code
            // documentation: https://developers.paystack.co/reference#initialize-a-transaction
            //new fetchAccessCodeFromServer().execute(backend_url + "/new-access-code");
        }
    }

    /**
     * Method to validate the form, and set errors on the edittexts.
     */
    private Card loadCardFromForm() {
        //validate fields
        Card card;

        String cardNum = mCardForm.getCardNumber();

        //build card object with ONLY the number, update the other fields later
        card = new Card.Builder(cardNum, 0, 0, "").build();
        String cvc = mCardForm.getCvv();
        //update the cvc field of the card
        card.setCvc(cvc);

        //validate expiry month;
        String sMonth = mCardForm.getExpirationMonth();
        int month = 0;
        try {
            month = Integer.parseInt(sMonth);
        } catch (Exception ignored) {
        }

        card.setExpiryMonth(month);

        String sYear = mCardForm.getExpirationYear();
        int year = 0;
        try {
            year = Integer.parseInt(sYear);
        } catch (Exception ignored) {
        }
        card.setExpiryYear(year);

        return card;
    }

    @Override
    public void onPause() {
        super.onPause();

        if ((dialog != null) && dialog.isShowing()) {
            
        }
        dialog = null;
    }



    private void chargeCard() {
        transaction = null;
        PaystackSdk.chargeCard(PaymentActivity.this, charge, new Paystack.TransactionCallback() {
            // This is called only after transaction is successful
            @Override
            public void onSuccess(Transaction transaction) {

                PaymentActivity.this.transaction = transaction;
                dialog.setMessage("Trying to Verify Your Transaction... please wait");
                Log.d("REFERENCE", transaction.getReference());
                Toast.makeText(PaymentActivity.this, transaction.getReference(), Toast.LENGTH_LONG).show();


                verifyOnServer(transaction.getReference());
            }

            // This is called only before requesting OTP
            // Save reference so you may send to server if
            // error occurs with OTP
            // No need to dismiss dialog
            @Override
            public void beforeValidate(Transaction transaction) {
                PaymentActivity.this.transaction = transaction;
                Toast.makeText(PaymentActivity.this, transaction.getReference(), Toast.LENGTH_LONG).show();

            }




            @Override
            public void onError(Throwable error, Transaction transaction) {
                // If an access code has expired, simply ask your server for a new one
                // and restart the charge instead of displaying error
                PaymentActivity.this.transaction = transaction;
                if (error instanceof ExpiredAccessCodeException) {
                    try {
                        PaymentActivity.this.startAFreshCharge(false);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    PaymentActivity.this.chargeCard();
                    return;
                }

                dismissDialog();

                if (transaction.getReference() != null) {
                    Toast.makeText(PaymentActivity.this, transaction.getReference() + " concluded with error: " + error.getMessage(), Toast.LENGTH_LONG).show();
                    //mTextError.setText(String.format("%s  concluded with error: %s %s", transaction.getReference(), error.getClass().getSimpleName(), error.getMessage()));
                    new verifyOnServer().execute(transaction.getReference());
                } else {
                    Toast.makeText(PaymentActivity.this, error.getMessage(), Toast.LENGTH_LONG).show();
                   // mTextError.setText(String.format("Error: %s %s", error.getClass().getSimpleName(), error.getMessage()));
                }

            }

        });
    }

    private void dismissDialog() {
        if ((dialog != null) && dialog.isShowing()) {
            dialog.dismiss();
        }
    }

    private void updateTextViews() {
        if (transaction.getReference() != null) {
            mTextReference.setText(String.format("Reference: %s", transaction.getReference()));
        } else {
            mTextReference.setText("No transaction");
        }
    }


    private boolean isEmpty(String s) {
        return s == null || s.length() < 1;
    }

    private void checkConnection() {
        boolean isConnected = ConnectivityReceiver.isConnected();
        showSnack(isConnected);
    }

    private void showSnack(boolean isConnected) {
        String message;
        int color;
        if (isConnected) {
            message = "Good! Connected to Internet";
            color = Color.WHITE;
            snackbar = Snackbar.make(findViewById(R.id.app), message, Snackbar.LENGTH_INDEFINITE);

            View sbView = snackbar.getView();
            TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);
            textView.setTextColor(color);
            snackbar.show();
            snackbar.dismiss();


        } else {
            message = "Not connected to internet";
            color = Color.WHITE;
            snackbar = Snackbar.make(findViewById(R.id.app), message, Snackbar.LENGTH_INDEFINITE);

            View sbView = snackbar.getView();
            TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);
            textView.setTextColor(color);
            snackbar.show();
        }


    }

    @Override
    protected void onResume() {
        super.onResume();

        // register connection status listener
        AppController.getInstance().setConnectivityListener(this);
    }

    /**
     * Callback will be triggered when there is change in
     * network connection
     */
    @Override
    public void onNetworkConnectionChanged(boolean isConnected) {
        showSnack(isConnected);


    }

    private void verifyOnServer(final String trans) {



        String ay = db.getApikey().get("apikey");
        String url = "https://disciplesbay.com/api/verify/payment?apiKey=" + ay + "&reference=" + trans;
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        StringRequest stringRequest = new StringRequest(Request.Method.GET,
                url, new Response.Listener<String>() {

            @Override
            public void onResponse(String response) {

                Log.d("Testimony Activity", "Send Testimony response " + response.toString());
                dialog.setMessage("Successful");
                dismissDialog();
                finish();



                try {

                    JSONObject jsonObject = new JSONObject(response);
                    JSONArray status = jsonObject.getJSONArray("status");



                } catch (JSONException e) {

                    e.printStackTrace();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

            }
        });

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN &&
                Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {
            HttpStack stack = null;
            try {
                stack = new HurlStack(null, new TLSSocketFactory());
            } catch (KeyManagementException e) {
                e.printStackTrace();
                Log.d("Your Wrapper Class", "Could not create new stack for TLS v1.2");
                stack = new HurlStack();
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                Log.d("Your Wrapper Class", "Could not create new stack for TLS v1.2");
                stack = new
                        HurlStack();
            }
            requestQueue = Volley.newRequestQueue(this, stack);
        } else {
            requestQueue = Volley.newRequestQueue(this);
        }

        int socketTimeout = 0;
        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
        stringRequest.setRetryPolicy(policy);
        requestQueue.add(stringRequest);
    }

    private class fetchAccessCodeFromServer extends AsyncTask<String, Void, String> {
        private String error;

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            if (result != null) {
                charge.setAccessCode(result);
                chargeCard();
            } else {
                PaymentActivity.this.mTextBackendMessage.setText(String.format("There was a problem getting a new access code form the backend: %s", error));
                dismissDialog();
            }
        }

        @Override
        protected String doInBackground(String... ac_url) {
            try {
                URL url = new URL(ac_url[0]);
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                url.openStream()));


                String inputLine;
                inputLine = in.readLine();
                in.close();
                return inputLine;

            } catch (Exception e) {
                error = e.getClass().getSimpleName() + ": " + e.getMessage();
            }
            return null;
        }
    }

    private class verifyOnServer extends AsyncTask<String, Void, String> {
        private String reference;
        private String error;

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);


            if (result != null) {
                Log.d("Testimony Activity", "Send Testimony response " + result);

                PaymentActivity.this.mTextBackendMessage.setText(String.format("Gateway response: %s", result));

            } else {
                PaymentActivity.this.mTextBackendMessage.setText(String.format("There was a problem verifying %s on the backend: %s ", this.reference, error));
                dismissDialog();
            }
        }

        @Override
        protected String doInBackground(String... reference) {

            SQLiteHandler db = new SQLiteHandler(PaymentActivity.this);
            String apiKey = db.getApikey().get("apikey");
            try {
                this.reference = reference[0];
                backend_url = "https://disciplesbay.com/api/verify/payment?apiKey=" + apiKey + "&reference=";
                URL url = new URL(backend_url + this.reference);
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                url.openStream()));

                String inputLine;
                inputLine = in.readLine();
                in.close();
                return inputLine;
            } catch (Exception e) {
                error = e.getClass().getSimpleName() + ": " + e.getMessage();
            }
            return null;
        }




    }
    @Override
    public void onCardTypeChanged(CardType cardType) {
        if (cardType == CardType.EMPTY) {
            mSupportedCardTypesView.setSupportedCardTypes(SUPPORTED_CARD_TYPES);
        } else {
            mSupportedCardTypesView.setSelected(cardType);
        }
    }

    @Override
    public void onCardFormSubmit() {
        if (mCardForm.isValid()) {

            Toast.makeText(PaymentActivity.this, "Valid", Toast.LENGTH_SHORT).show();
        } else {
            mCardForm.validate();
            Toast.makeText(PaymentActivity.this, "Invalid", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        super.onOptionsItemSelected(item);

        if (item.getItemId() == R.id.card_io_item) {
            mCardForm.scanCard(PaymentActivity.this);
            return true;
        }

        return false;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.card_io_dark, menu);

        return true;
    }

}
